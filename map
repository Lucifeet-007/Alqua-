<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Indian Water Bodies - Interactive Map</title>
    <!-- Mapbox CSS -->
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
            position: relative;
        }

        .sidebar {
            width: 400px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 0 20px 0 0;
            padding: 25px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        }

        .search-container {
            position: relative;
            margin-bottom: 25px;
        }

        .search-box {
            width: 100%;
            padding: 15px 45px 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 30px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .search-box:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 15px rgba(76, 175, 80, 0.3);
            background: white;
        }

        .search-btn {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
        }

        .filters {
            margin-bottom: 25px;
        }

        .filter-group {
            margin-bottom: 20px;
        }

        .filter-title {
            font-weight: bold;
            margin-bottom: 12px;
            color: #2c3e50;
            font-size: 16px;
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .filter-btn {
            padding: 8px 16px;
            background: rgba(240, 240, 240, 0.8);
            border: 1px solid #ddd;
            border-radius: 20px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border-color: #4CAF50;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        }

        .data-panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 25px;
            display: none;
            border-left: 4px solid #4CAF50;
        }

        .data-panel.active {
            display: block;
        }

        #map {
            flex: 1;
            height: 100vh;
            border-radius: 20px 0 0 20px;
        }

        .weather-overlay {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            padding: 20px;
            border-radius: 20px;
            z-index: 1000;
            min-width: 250px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        }

        .weather-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .weather-icon {
            font-size: 24px;
            margin-right: 10px;
            color: #4CAF50;
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 30px;
            z-index: 2000;
            animation: slideDown 0.4s ease;
            display: none;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateX(-50%) translateY(-30px); }
            to { opacity: 1; transform: translateX(-50%) translateY(0); }
        }

        .popup-content {
            max-width: 350px;
        }

        .popup-title {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 10px;
            color: #2c3e50;
        }

        .popup-section {
            margin-bottom: 12px;
            display: flex;
            align-items: center;
        }

        .popup-label {
            font-weight: bold;
            color: #555;
            margin-right: 8px;
            min-width: 60px;
        }

        .fishing-status {
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: bold;
            margin-top: 8px;
            display: inline-block;
            text-align: center;
        }

        .fishing-excellent {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            border: 1px solid #b8dacc;
        }

        .fishing-good {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            color: #856404;
            border: 1px solid #f1c40f;
        }

        .fishing-poor {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            border: 1px solid #e74c3c;
        }

        .chart-container {
            margin-top: 15px;
            height: 200px;
        }

        .toggle-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: rgba(255, 255, 255, 0.95);
            border: none;
            border-radius: 50%;
            width: 55px;
            height: 55px;
            cursor: pointer;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            font-size: 18px;
            color: #333;
        }

        .toggle-btn:hover {
            background: white;
            transform: scale(1.1);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .port-legend {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            padding: 20px;
            border-radius: 15px;
            z-index: 1000;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .legend-icon {
            width: 24px;
            height: 24px;
            margin-right: 12px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
        }

        .excel-upload {
            margin-bottom: 20px;
            padding: 15px;
            background: rgba(240, 248, 255, 0.8);
            border-radius: 10px;
            border: 2px dashed #4CAF50;
        }

        .upload-btn {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .upload-btn:hover {
            background: #45a049;
            transform: translateY(-1px);
        }

        .api-status {
            position: absolute;
            bottom: 80px;
            left: 20px;
            background: rgba(255, 255, 255, 0.95);
            padding: 10px 15px;
            border-radius: 10px;
            z-index: 1000;
            font-size: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-connected {
            background: #4CAF50;
        }

        .status-disconnected {
            background: #f44336;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: 35%;
                border-radius: 0;
            }
            
            #map {
                height: 65%;
                border-radius: 0;
            }
            
            .container {
                flex-direction: column;
            }
            
            .weather-overlay {
                right: 10px;
                top: 10px;
                min-width: 200px;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="notification" id="notification"></div>
    
    <div class="container">
        <button class="toggle-btn" id="toggleSidebar">
            <i class="fas fa-bars"></i>
        </button>

        <div class="sidebar" id="sidebar">
            <h2 style="margin-bottom: 25px; color: #2c3e50;">
                <i class="fas fa-water"></i> Indian Water Bodies
            </h2>
            
            <!-- Excel Data Upload Section -->
            <div class="excel-upload">
                <label for="excelFile" class="upload-btn">
                    <i class="fas fa-upload" style="margin-right: 8px;"></i>
                    Upload Excel Data
                </label>
                <input type="file" id="excelFile" accept=".xlsx,.xls,.csv" style="display: none;">
                <div style="margin-top: 8px; font-size: 12px; color: #666;">
                    Upload your water body data (Excel/CSV)
                </div>
            </div>
            
            <div class="search-container">
                <input type="text" class="search-box" id="searchBox" placeholder="Search Indian rivers, lakes, seas, ports...">
                <button class="search-btn" id="searchBtn">
                    <i class="fas fa-search"></i>
                </button>
            </div>

            <div class="filters">
                <div class="filter-group">
                    <div class="filter-title">
                        <i class="fas fa-filter"></i> Water Body Type
                    </div>
                    <div class="filter-options">
                        <button class="filter-btn active" data-type="all">All</button>
                        <button class="filter-btn" data-type="river">Rivers</button>
                        <button class="filter-btn" data-type="lake">Lakes</button>
                        <button class="filter-btn" data-type="sea">Seas</button>
                        <button class="filter-btn" data-type="port">Ports</button>
                    </div>
                </div>
            </div>

            <div class="data-panel" id="dataPanel">
                <h3 style="margin-bottom: 15px; color: #2c3e50;">
                    <i class="fas fa-info-circle"></i> Selected Water Body
                </h3>
                <div id="selectedData"></div>
                <div class="chart-container" id="chartContainer"></div>
            </div>
        </div>

        <div id="map"></div>

        <div class="weather-overlay" id="weatherOverlay">
            <div class="weather-header">
                <i class="fas fa-cloud-sun weather-icon"></i>
                <h4>Live Weather</h4>
            </div>
            <div id="weatherData">Click on any water body to see live weather data</div>
        </div>

        <div class="api-status" id="apiStatus">
            <div><span class="status-indicator status-disconnected"></span>Mapbox: Connecting...</div>
            <div><span class="status-indicator status-disconnected"></span>Weather: Connecting...</div>
        </div>

        <div class="port-legend">
            <h4 style="margin-bottom: 12px; color: #2c3e50;">Legend</h4>
            <div class="legend-item">
                <div class="legend-icon" style="background: #2196F3;">
                    <i class="fas fa-water"></i>
                </div>
                <span>Rivers</span>
            </div>
            <div class="legend-item">
                <div class="legend-icon" style="background: #4CAF50;">
                    <i class="fas fa-tint"></i>
                </div>
                <span>Lakes</span>
            </div>
            <div class="legend-item">
                <div class="legend-icon" style="background: #FF9800;">
                    <i class="fas fa-wave-square"></i>
                </div>
                <span>Seas/Oceans</span>
            </div>
            <div class="legend-item">
                <div class="legend-icon" style="background: #F44336;">
                    <i class="fas fa-ship"></i>
                </div>
                <span>Major Ports</span>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    
    <script>
        // ============= API CONFIGURATION =============
        // 🔑 YOUR API KEYS - CONFIGURED
        const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibWFubmVydWhpdGVzaCIsImEiOiJjbWZpZHh1aHkwa3h4MmlxM29wa2MxcGN2In0.wHND5nVpmR3H-HAEtR2VzA';
        const OPENWEATHER_API_KEY = '753e32c82e478fe2764615d58aabfefe';
        
        // Set Mapbox access token
        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

        // ============= MAP INITIALIZATION =============
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/satellite-streets-v12', // You can change this style
            center: [78.9629, 20.5937], // Center on India
            zoom: 4.5,
            maxBounds: [
                [68.0, 6.0],   // Southwest coordinates (India bounds)
                [97.0, 37.0]   // Northeast coordinates (India bounds)
            ]
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');
        map.addControl(new mapboxgl.FullscreenControl(), 'top-right');

        // ============= DATA STORAGE =============
        let excelData = []; // Will store your Excel sheet data
        let currentMarkers = [];
        let currentPopup = null;

        // Default Indian water bodies data (will be replaced by your Excel data)
        const defaultWaterBodies = [
            {
                name: "River Ganges", type: "river", lat: 25.3176, lng: 83.0077,
                state: "Uttar Pradesh", district: "Varanasi",
                ecosystem: "Rich biodiversity with over 140 fish species including Hilsa, Rohu, Catla",
                fishData: { total_species: 140, endemic: 25, commercial: 30, endangered: 8 },
                salinity: "Fresh", avg_depth: "16m", length_km: 2525,
                major_cities: ["Haridwar", "Kanpur", "Varanasi", "Patna", "Kolkata"]
            },
            {
                name: "Arabian Sea", type: "sea", lat: 19.0760, lng: 72.8777,
                state: "Maharashtra", district: "Mumbai",
                ecosystem: "Marine ecosystem with coral reefs, rich in Pomfret, Kingfish, Sardines",
                fishData: { total_species: 300, endemic: 50, commercial: 80, endangered: 15 },
                salinity: "Salt", avg_depth: "2734m", area_sq_km: 3862000,
                major_ports: ["Mumbai", "Kandla", "Cochin", "Mangalore"]
            },
            {
                name: "Dal Lake", type: "lake", lat: 34.1362, lng: 74.8255,
                state: "Jammu & Kashmir", district: "Srinagar",
                ecosystem: "High altitude freshwater ecosystem with Schizothorax species",
                fishData: { total_species: 15, endemic: 3, commercial: 8, endangered: 2 },
                salinity: "Fresh", avg_depth: "6m", area_sq_km: 18,
                speciality: "Famous for houseboats and Shikara rides"
            },
            {
                name: "River Yamuna", type: "river", lat: 28.6139, lng: 77.2090,
                state: "Delhi", district: "New Delhi",
                ecosystem: "Urban river ecosystem, historically rich but currently stressed",
                fishData: { total_species: 45, endemic: 5, commercial: 12, endangered: 8 },
                salinity: "Fresh", avg_depth: "5m", length_km: 1376,
                major_cities: ["Delhi", "Mathura", "Agra"]
            },
            {
                name: "Bay of Bengal", type: "sea", lat: 15.0000, lng: 88.0000,
                state: "West Bengal", district: "Kolkata",
                ecosystem: "Large marine ecosystem with mangroves, rich in Hilsa, Prawn, Crab",
                fishData: { total_species: 400, endemic: 75, commercial: 120, endangered: 20 },
                salinity: "Salt", avg_depth: "2600m", area_sq_km: 2172000,
                major_ports: ["Kolkata", "Visakhapatnam", "Chennai", "Paradip"]
            }
        ];

        // Major Indian ports with detailed information
        const indianPorts = [
            { 
                name: "Mumbai Port", lat: 18.9220, lng: 72.8347,
                state: "Maharashtra", type: "Major Port",
                cargo_capacity: "70 million tonnes", established: 1873,
                speciality: "Largest container port in India"
            },
            { 
                name: "JNPT Mumbai", lat: 18.9647, lng: 72.9492,
                state: "Maharashtra", type: "Major Port",
                cargo_capacity: "80 million tonnes", established: 1989,
                speciality: "India's premier container port"
            },
            { 
                name: "Kolkata Port", lat: 22.5726, lng: 88.3639,
                state: "West Bengal", type: "Major Port",
                cargo_capacity: "65 million tonnes", established: 1870,
                speciality: "Oldest operating port in India"
            },
            { 
                name: "Chennai Port", lat: 13.0827, lng: 80.2707,
                state: "Tamil Nadu", type: "Major Port",
                cargo_capacity: "100 million tonnes", established: 1881,
                speciality: "Gateway to South India"
            },
            { 
                name: "Visakhapatnam Port", lat: 17.6868, lng: 83.2185,
                state: "Andhra Pradesh", type: "Major Port",
                cargo_capacity: "75 million tonnes", established: 1933,
                speciality: "Natural harbor with deep waters"
            },
            { 
                name: "Cochin Port", lat: 9.9312, lng: 76.2673,
                state: "Kerala", type: "Major Port",
                cargo_capacity: "30 million tonnes", established: 1928,
                speciality: "India's transshipment hub"
            },
            { 
                name: "Kandla Port", lat: 23.0225, lng: 70.2208,
                state: "Gujarat", type: "Major Port",
                cargo_capacity: "115 million tonnes", established: 1950,
                speciality: "Largest cargo port by volume"
            }
        ];

        // ============= EXCEL FILE PROCESSING =============
        // 📊 Excel file upload handler
        document.getElementById('excelFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // Read the first sheet
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    
                    // Convert to JSON
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    
                    // Process your Excel data
                    excelData = processExcelData(jsonData);
                    
                    // Clear existing markers and add new ones
                    clearAllMarkers();
                    addWaterBodiesToMap(excelData);
                    
                    showNotification(`✅ Loaded ${excelData.length} water bodies from Excel file`);
                    
                } catch (error) {
                    console.error('Error reading Excel file:', error);
                    showNotification('❌ Error reading Excel file. Please check the format.');
                }
            };
            reader.readAsArrayBuffer(file);
        });

        // ============= EXCEL DATA PROCESSING =============
        // 📋 Process Excel data to match our format
        function processExcelData(rawData) {
            return rawData.map(row => ({
                // Map your Excel columns to our data structure
                // Adjust these column names to match your Excel sheet headers
                name: row['Name'] || row['WaterBody_Name'] || row['name'],
                type: (row['Type'] || row['type'] || '').toLowerCase(),
                lat: parseFloat(row['Latitude'] || row['lat'] || 0),
                lng: parseFloat(row['Longitude'] || row['lng'] || row['lon'] || 0),
                state: row['State'] || row['state'] || '',
                district: row['District'] || row['district'] || '',
                ecosystem: row['Ecosystem'] || row['ecosystem'] || 'No data available',
                fishData: {
                    total_species: parseInt(row['Total_Species'] || row['fish_species'] || 0),
                    endemic: parseInt(row['Endemic_Species'] || row['endemic'] || 0),
                    commercial: parseInt(row['Commercial_Species'] || row['commercial'] || 0),
                    endangered: parseInt(row['Endangered_Species'] || row['endangered'] || 0)
                },
                salinity: row['Salinity'] || row['salinity'] || 'Unknown',
                avg_depth: row['Avg_Depth'] || row['depth'] || 'Unknown',
                area_sq_km: parseFloat(row['Area_SqKm'] || row['area'] || 0),
                length_km: parseFloat(row['Length_Km'] || row['length'] || 0)
            })).filter(item => item.lat && item.lng && item.name); // Filter out invalid entries
        }

        // ============= WEATHER API INTEGRATION =============
        // 🌤️ Get real weather data from OpenWeather API
        async function getWeatherData(lat, lng) {
            try {
                // Check if API key is set
                if (OPENWEATHER_API_KEY === 'YOUR_OPENWEATHER_API_KEY_HERE') {
                    // Return mock data if API key not set
                    return getMockWeatherData();
                }

                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${OPENWEATHER_API_KEY}&units=metric`
                );
                
                if (!response.ok) {
                    throw new Error('Weather API request failed');
                }
                
                const data = await response.json();
                
                updateAPIStatus('weather', true);
                
                return {
                    temp: Math.round(data.main.temp),
                    humidity: data.main.humidity,
                    windSpeed: Math.round(data.wind.speed * 3.6), // Convert m/s to km/h
                    conditions: data.weather[0].main,
                    description: data.weather[0].description,
                    pressure: data.main.pressure,
                    visibility: data.visibility / 1000, // Convert to km
                    icon: data.weather[0].icon
                };
            } catch (error) {
                console.error('Weather API error:', error);
                updateAPIStatus('weather', false);
                return getMockWeatherData(); // Fallback to mock data
            }
        }

        // Mock weather data for testing
        function getMockWeatherData() {
            return {
                temp: Math.round(Math.random() * 15 + 20),
                humidity: Math.round(Math.random() * 40 + 40),
                windSpeed: Math.round(Math.random() * 10 + 5),
                conditions: ['Clear', 'Clouds', 'Rain', 'Thunderstorm'][Math.floor(Math.random() * 4)],
                description: 'partly cloudy',
                pressure: Math.round(Math.random() * 50 + 1000),
                visibility: Math.round(Math.random() * 5 + 5)
            };
        }

        // ============= FISHING CONDITION ASSESSMENT =============
        // 🎣 Advanced fishing condition algorithm for Indian waters
        function assessFishingConditions(weather, waterBody) {
            let score = 0;
            let factors = [];
            
            // Temperature factor (optimized for Indian climate)
            if (weather.temp >= 22 && weather.temp <= 30) {
                score += 4;
                factors.push('Ideal temperature');
            } else if (weather.temp >= 18 && weather.temp <= 35) {
                score += 3;
                factors.push('Good temperature');
            } else {
                score += 1;
                factors.push('Suboptimal temperature');
            }
            
            // Weather condition factor
            switch(weather.conditions.toLowerCase()) {
                case 'clear':
                case 'clouds':
                    score += 4;
                    factors.push('Stable weather');
                    break;
                case 'rain':
                    score += 2;
                    factors.push('Light rain can be good');
                    break;
                default:
                    score += 1;
                    factors.push('Unstable weather');
            }
            
            // Wind factor
            if (weather.windSpeed >= 5 && weather.windSpeed <= 15) {
                score += 3;
                factors.push('Gentle breeze');
            } else if (weather.windSpeed >= 3 && weather.windSpeed <= 20) {
                score += 2;
                factors.push('Moderate wind');
            } else {
                score += 1;
                factors.push('Wind conditions not ideal');
            }
            
            // Humidity factor (important for Indian climate)
            if (weather.humidity >= 60 && weather.humidity <= 80) {
                score += 2;
                factors.push('Good humidity');
            } else {
                score += 1;
            }
            
            // Water body type factor
            if (waterBody.type === 'river' && waterBody.fishData.total_species > 50) {
                score += 2;
                factors.push('Rich river ecosystem');
            } else if (waterBody.type === 'lake' && waterBody.salinity === 'Fresh') {
                score += 2;
                factors.push('Freshwater lake');
            } else if (waterBody.type === 'sea') {
                score += 1;
                factors.push('Marine fishing');
            }
            
            // Season factor (basic implementation)
            const month = new Date().getMonth();
            if ((month >= 10 || month <= 2) && (waterBody.type === 'river' || waterBody.type === 'lake')) {
                score += 1;
                factors.push('Winter season - good for freshwater fishing');
            } else if ((month >= 3 && month <= 5) && waterBody.type === 'sea') {
                score += 1;
                factors.push('Pre-monsoon - good for marine fishing');
            }
            
            if (score >= 12) return { status: 'Excellent', class: 'fishing-excellent', factors };
            else if (score >= 9) return { status: 'Good', class: 'fishing-good', factors };
            else if (score >= 6) return { status: 'Average', class: 'fishing-good', factors };
            else return { status: 'Poor', class: 'fishing-poor', factors };
        }

        // ============= MAP MARKERS AND INTERACTIONS =============
        // Add water bodies to map
        function addWaterBodiesToMap(waterBodies) {
            waterBodies.forEach(body => {
                if (!body.lat || !body.lng) return;
                
                const el = document.createElement('div');
                el.className = 'marker';
                el.innerHTML = getMarkerIcon(body.type);
                el.style.width = '30px';
                el.style.height = '30px';
                el.style.cursor = 'pointer';

                const marker = new mapboxgl.Marker(el)
                    .setLngLat([body.lng, body.lat])
                    .addTo(map);

                marker.getElement().addEventListener('click', () => {
                    selectWaterBody(body, [body.lng, body.lat]);
                });

                currentMarkers.push({marker, type: body.type, data: body});
            });
        }

        // Add ports to map
        function addPortsToMap() {
            indianPorts.forEach(port => {
                const el = document.createElement('div');
                el.className = 'marker';
                el.innerHTML = '<i class="fas fa-ship" style="color: #F44336; font-size: 20px;"></i>';
                el.style.width = '30px';
                el.style.height = '30px';
                el.style.cursor = 'pointer';

                const marker = new mapboxgl.Marker(el)
                    .setLngLat([port.lng, port.lat])
                    .addTo(map);

                const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
                    <div class="popup-content">
                        <div class="popup-title">${port.name}</div>
                        <div class="popup-section">
                            <span class="popup-label">State:</span> ${port.state}
                        </div>
                        <div class="popup-section">
                            <span class="popup-label">Capacity:</span> ${port.cargo_capacity}
                        </div>
                        <div class="popup-section">
                            <span class="popup-label">Established:</span> ${port.established}
                        </div>
                        <div class="popup-section">
                            <span class="popup-label">Speciality:</span> ${port.speciality}
                        </div>
                    </div>
                `);

                marker.getElement().addEventListener('click', () => {
                    if (currentPopup) currentPopup.remove();
                    currentPopup = popup;
                    popup.setLngLat([port.lng, port.lat]).addTo(map);
                    showNotification(`Port Info: ${port.name}`);
                });

                currentMarkers.push({marker, type: 'port', data: port});
            });
        }

        // Get marker icon based on type
        function getMarkerIcon(type) {
            const icons = {
                river: '<i class="fas fa-water" style="color: #2196F3; font-size: 20px;"></i>',
                lake: '<i class="fas fa-tint" style="color: #4CAF50; font-size: 20px;"></i>',
                sea: '<i class="fas fa-wave-square" style="color: #FF9800; font-size: 20px;"></i>',
                ocean: '<i class="fas fa-wave-square" style="color: #FF9800; font-size: 20px;"></i>'
            };
            return icons[type] || icons.river;
        }

        // Select water body and show detailed information
        async function selectWaterBody(body, coordinates) {
            try {
                // Get weather data
                const weather = await getWeatherData(body.lat, body.lng);
                const fishingCondition = assessFishingConditions(weather, body);
                
                // Update weather overlay
                document.getElementById('weatherData').innerHTML = `
                    <div><strong>${body.name}</strong></div>
                    <div style="margin: 10px 0; padding: 10px; background: rgba(76, 175, 80, 0.1); border-radius: 8px;">
                        <div>🌡️ Temperature: <strong>${weather.temp}°C</strong></div>
                        <div>💧 Humidity: <strong>${weather.humidity}%</strong></div>
                        <div>💨 Wind: <strong>${weather.windSpeed} km/h</strong></div>
                        <div>☁️ Conditions: <strong>${weather.conditions}</strong></div>
                        <div>👁️ Visibility: <strong>${weather.visibility}km</strong></div>
                        <div>⏱️ Updated: <strong>Now</strong></div>
                    </div>
                `;
                
                // Show data panel
                document.getElementById('dataPanel').classList.add('active');
                document.getElementById('selectedData').innerHTML = `
                    <div style="border-bottom: 2px solid #e0e0e0; margin-bottom: 15px; padding-bottom: 10px;">
                        <h3 style="color: #2c3e50; margin-bottom: 5px;">${body.name}</h3>
                        <span style="background: #4CAF50; color: white; padding: 4px 12px; border-radius: 15px; font-size: 12px;">
                            ${body.type.toUpperCase()}
                        </span>
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">📍 Location:</span> ${body.state}${body.district ? `, ${body.district}` : ''}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">🐟 Total Species:</span> ${body.fishData.total_species || 'N/A'}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">🌿 Endemic:</span> ${body.fishData.endemic || 'N/A'}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">🎣 Commercial:</span> ${body.fishData.commercial || 'N/A'}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">⚠️ Endangered:</span> ${body.fishData.endangered || 'N/A'}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">💧 Salinity:</span> ${body.salinity}
                    </div>
                    
                    <div class="popup-section">
                        <span class="popup-label">📏 Avg Depth:</span> ${body.avg_depth}
                    </div>
                    
                    <div class="popup-section" style="margin-top: 15px;">
                        <span class="popup-label">🌊 Ecosystem:</span>
                        <div style="font-size: 13px; color: #666; margin-top: 5px; line-height: 1.4;">
                            ${body.ecosystem}
                        </div>
                    </div>
                    
                    <div style="margin-top: 15px; padding: 15px; background: ${fishingCondition.class === 'fishing-excellent' ? 'rgba(76, 175, 80, 0.1)' : fishingCondition.class === 'fishing-good' ? 'rgba(255, 193, 7, 0.1)' : 'rgba(244, 67, 54, 0.1)'}; border-radius: 10px;">
                        <div class="popup-label">🎣 Fishing Conditions:</div>
                        <div class="fishing-status ${fishingCondition.class}" style="margin-top: 8px; width: 100%;">
                            ${fishingCondition.status} for Fishing
                        </div>
                        <div style="font-size: 11px; color: #666; margin-top: 8px;">
                            Factors: ${fishingCondition.factors.slice(0, 3).join(', ')}
                        </div>
                    </div>
                `;
                
                // Create detailed chart
                createDetailedFishChart(body.fishData);
                
                // Show popup on map
                if (currentPopup) currentPopup.remove();
                
                const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
                    <div class="popup-content">
                        <div class="popup-title">${body.name}</div>
                        <div class="popup-section">
                            <span class="popup-label">🌡️ Temp:</span> ${weather.temp}°C | 
                            <span class="popup-label">💨 Wind:</span> ${weather.windSpeed}km/h
                        </div>
                        <div class="popup-section">
                            <span class="popup-label">🐟 Species:</span> ${body.fishData.total_species || 'N/A'}
                        </div>
                        <div class="popup-section">
                            <div class="fishing-status ${fishingCondition.class}">
                                🎣 ${fishingCondition.status} for Fishing
                            </div>
                        </div>
                    </div>
                `);
                
                currentPopup = popup;
                popup.setLngLat(coordinates).addTo(map);
                
                // Center map on selected location
                map.flyTo({
                    center: coordinates,
                    zoom: Math.max(map.getZoom(), 8),
                    duration: 1000
                });
                
                showNotification(`🎣 ${body.name}: ${fishingCondition.status} fishing conditions detected!`);
                
            } catch (error) {
                console.error('Error selecting water body:', error);
                showNotification('❌ Error loading water body data');
            }
        }

        // Create detailed fish data chart
        function createDetailedFishChart(fishData) {
            const chartContainer = document.getElementById('chartContainer');
            chartContainer.innerHTML = '<canvas id="fishChart" width="300" height="200"></canvas>';
            
            const ctx = document.getElementById('fishChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Endemic Species', 'Commercial Species', 'Endangered Species', 'Other Species'],
                    datasets: [{
                        data: [
                            fishData.endemic || 0,
                            fishData.commercial || 0,
                            fishData.endangered || 0,
                            Math.max(0, (fishData.total_species || 0) - (fishData.endemic || 0) - (fishData.commercial || 0) - (fishData.endangered || 0))
                        ],
                        backgroundColor: ['#4CAF50', '#2196F3', '#FF5722', '#FFC107'],
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { 
                                fontSize: 10,
                                padding: 10,
                                usePointStyle: true
                            }
                        },
                        title: {
                            display: true,
                            text: 'Fish Species Distribution',
                            font: { size: 14, weight: 'bold' }
                        }
                    }
                }
            });
        }

        // ============= SEARCH AND FILTER FUNCTIONALITY =============
        // Search functionality
        function searchWaterBodies() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase().trim();
            if (!searchTerm) {
                showNotification('Please enter a search term');
                return;
            }
            
            // Search in current data (Excel data if loaded, otherwise default data)
            const dataToSearch = excelData.length > 0 ? excelData : defaultWaterBodies;
            
            const found = dataToSearch.find(body => 
                body.name.toLowerCase().includes(searchTerm) ||
                (body.state && body.state.toLowerCase().includes(searchTerm)) ||
                (body.district && body.district.toLowerCase().includes(searchTerm))
            );
            
            const foundPort = indianPorts.find(port => 
                port.name.toLowerCase().includes(searchTerm) ||
                port.state.toLowerCase().includes(searchTerm)
            );
            
            if (found) {
                map.flyTo({
                    center: [found.lng, found.lat],
                    zoom: 10,
                    duration: 2000
                });
                selectWaterBody(found, [found.lng, found.lat]);
                showNotification(`📍 Found: ${found.name}`);
            } else if (foundPort) {
                map.flyTo({
                    center: [foundPort.lng, foundPort.lat],
                    zoom: 12,
                    duration: 2000
                });
                showNotification(`⚓ Found Port: ${foundPort.name}`);
            } else {
                showNotification('❌ Location not found. Try searching for Indian rivers, lakes, seas, or ports.');
            }
        }

        // Filter water bodies by type
        function filterWaterBodies(type) {
            currentMarkers.forEach(item => {
                if (type === 'all') {
                    item.marker.getElement().style.display = 'block';
                } else {
                    if (item.type === type) {
                        item.marker.getElement().style.display = 'block';
                    } else {
                        item.marker.getElement().style.display = 'none';
                    }
                }
            });
            
            showNotification(`Filtered: Showing ${type === 'all' ? 'all water bodies' : type + 's'}`);
        }

        // ============= UTILITY FUNCTIONS =============
        // Clear all markers
        function clearAllMarkers() {
            currentMarkers.forEach(item => {
                item.marker.remove();
            });
            currentMarkers = [];
        }

        // Show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.innerHTML = message;
            notification.style.display = 'block';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 4000);
        }

        // Update API connection status
        function updateAPIStatus(service, connected) {
            const statusElement = document.getElementById('apiStatus');
            const indicators = statusElement.querySelectorAll('.status-indicator');
            
            if (service === 'mapbox') {
                indicators[0].className = `status-indicator ${connected ? 'status-connected' : 'status-disconnected'}`;
                statusElement.children[0].innerHTML = `<span class="status-indicator ${connected ? 'status-connected' : 'status-disconnected'}"></span>Mapbox: ${connected ? 'Connected' : 'Error'}`;
            } else if (service === 'weather') {
                indicators[1].className = `status-indicator ${connected ? 'status-connected' : 'status-disconnected'}`;
                statusElement.children[1].innerHTML = `<span class="status-indicator ${connected ? 'status-connected' : 'status-disconnected'}"></span>Weather: ${connected ? 'Connected' : 'Error'}`;
            }
        }

        // Toggle sidebar visibility
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const toggleBtn = document.getElementById('toggleSidebar');
            
            if (sidebar.style.transform === 'translateX(-100%)') {
                sidebar.style.transform = 'translateX(0)';
                toggleBtn.innerHTML = '<i class="fas fa-bars"></i>';
            } else {
                sidebar.style.transform = 'translateX(-100%)';
                toggleBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
            }
        }

        // ============= EVENT LISTENERS =============
        // Search event listeners
        document.getElementById('searchBtn').addEventListener('click', searchWaterBodies);
        document.getElementById('searchBox').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') searchWaterBodies();
        });

        // Sidebar toggle
        document.getElementById('toggleSidebar').addEventListener('click', toggleSidebar);

        // Filter buttons
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                filterWaterBodies(btn.dataset.type);
            });
        });

        // ============= MAP INITIALIZATION =============
        // Initialize map when it loads
        map.on('load', function() {
            console.log('🗺️ Mapbox map loaded successfully');
            updateAPIStatus('mapbox', true);
            
            // Add default water bodies and ports
            addWaterBodiesToMap(defaultWaterBodies);
            addPortsToMap();
            
            // Welcome notification
            setTimeout(() => {
                showNotification('🇮🇳 Welcome to Indian Water Bodies Map! Click on any water body to see fishing conditions.');
            }, 1500);
        });

        // Handle map errors
        map.on('error', function(e) {
            console.error('Mapbox error:', e);
            updateAPIStatus('mapbox', false);
            showNotification('❌ Map loading error. Please check your internet connection.');
        });

        // Add map click handler for closing popups
        map.on('click', function(e) {
            // Only close popup if not clicking on a marker
            const features = map.queryRenderedFeatures(e.point);
            if (features.length === 0 && currentPopup) {
                currentPopup.remove();
                currentPopup = null;
            }
        });

        // ============= INITIALIZATION =============
        // Initialize the application
        console.log('🚀 Indian Water Bodies Map initializing...');
        console.log('🔑 Mapbox token configured');
        console.log('🌤️ OpenWeather API configured');
        console.log('📊 Ready for Excel data upload');
    </script>
</body>
</html>
